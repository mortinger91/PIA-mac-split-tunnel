default_platform(:mac)
if !ENV['CI']
  puts "Do not run this locally (at least yet). It will change your system, the project, etc."
  exit 1
end

platform :mac do
  desc "Build the macOS application with specified provisioning profile and certificate"
  lane :build do
    setup_ci
    # Environment variables required for signing
    bundle_id = 'com.privateinternetaccess.vpn.splittunnel'
    provisioning_profile_path = ENV['PIA_APPLE_SPLIT_TUNNEL_PROVISION_PROFILE']
    codesigning_file = ENV['PIA_DEVELOPER_ID_FILE']
    codesign_cert_password = ENV['PIA_DEVELOPER_ID_PASSWORD']
    codesigning_identity = ENV['PIA_CODESIGN_IDENTITY']
    export_team_id = ENV['PIA_APPLE_TEAM_ID']

    # Add the certificate to the temporary keychain
    import_certificate(
      certificate_path: codesigning_file,
      keychain_name: 'fastlane_tmp_keychain', # This is created by setup_ci
      certificate_password: codesign_cert_password,
      keychain_password: '' # It has an empty password as created by setup_ci
    )
    install_provisioning_profile(path: provisioning_profile_path)

    # Read and parse the provisioning profile to extract the profile name
    # This is mostly constant, but if we ever change the name in 
    # developer.apple.com we don't have to change it here.
    profile_xml = `security cms -D -i #{provisioning_profile_path}`
    profile_data = Plist.parse_xml(profile_xml)
    profile_name = profile_data['Name']

    # Create a temporary file with the provisionprofile xml
    `security cms -D -i #{provisioning_profile_path} > tmp.provisionprofile`
    # Extract entitlements from the provisioning profile, replacing the original
    # This ensures we always have the entitlements set in developer.apple.com, which typically
    # do not match the ones set from XCode. For instance, we only use one of the 
    # network extension entitlements, but the provisioning profile includes all of them, and we 
    # cannot choose to remove some of them.
    `/usr/libexec/PlistBuddy -x -c 'Print:Entitlements' tmp.provisionprofile > ../ProxyExtension/ProxyExtension.entitlements`

    # We will sign manually
    update_code_signing_settings(
      use_automatic_signing: false,
    )

    # Set the bundle id from here, ignoring what's set from XCode.
    update_app_identifier(
      plist_path: 'ProxyExtension/Info.plist', # Path to info plist file, relative to xcodeproj
      app_identifier: bundle_id # The App Identifier
    )

    update_project_provisioning(
      profile: provisioning_profile_path,
      target_filter: "SplitTunnelProxyExtension", 
      build_configuration: "Release",
      code_signing_identity: codesigning_identity
    )

    # Build system extension
    build_mac_app(
      scheme: "SplitTunnelProxyExtension",
      archive_path: "./out/SplitTunnelExtension",
      output_directory: './out/',
      export_method: "developer-id",
      codesigning_identity: codesigning_identity,
      export_team_id: export_team_id,
      export_options: {
        provisioningProfiles: {
          bundle_id => profile_name
        }
      }
    )
  end
end